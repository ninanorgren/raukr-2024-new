---
title: "Demo Lab"
author: "Roy Francis"
description: "This is a demo quarto lab document to showcase the theme, style and usage."
format: html
---

```{r}
#| echo: false

# data handling
library(dplyr)
library(tidyr)
library(stringr)

# tables
library(htmlTable) # enchanced markdown table
library(kableExtra) # complete table
library(formattable) # table with conditional formatting
library(gt) # enchanced tables
library(DT) # interactive table
library(reactable) # interactive table

# graphics
library(ggplot2) # static graphics

# interactive graphics
library(highcharter)
library(plotly)
library(ggiraph) # convert ggplot to interactive
library(dygraphs) # time series
library(networkD3) # network graph
library(leaflet) # interactive maps
library(crosstalk) # linking plots

# extras
library(fontawesome) # icons

# custom ggplot theme
theme_report <- function(basesize = 12) {
    theme_bw(base_size = basesize) %+replace%
        theme(
            panel.border = element_blank(),
            panel.grid.minor = element_blank(),
            panel.grid.major.x = element_blank(),
            legend.position = "top",
            legend.direction = "horizontal"
        )
}
```

This is a [quarto](https://quarto.org/) document

## Text formatting

### Headings

```
## Level 2 heading  
### Level 3 heading  
#### Level 4 heading  
##### Level 5 heading  
###### Level 6 heading
```

### Character sizes

Custom character sizes. This is an enchanced feature.

|Markdown|Rendered|
|---|---|
|`[Largest text]{.largest}`|[Largest text]{.largest}|
|`[Larger text]{.larger}`|[Larger text]{.larger}|
|`[Large text]{.large}`|[Large text]{.large}|
|Normal text |Normal text|
|`[Small text]{.small}`|[Small text]{.small}|
|`[Smaller text]{.smaller}`|[Smaller text]{.smaller}|
|`[Smallest text]{.smallest}`|[Smallest text]{.smallest}|

### Character styles

|Markdown|Rendered|
|---|---|
|`__Bold text__`|__Bold text__|
|`_Italic text_`|_Italic text_|
|`~~Strikethrough~~`|~~Strikethrough~~|
|`H~2~O`|H~2~O|
|`x^2`|x^2|
|`--`|--|
|`---`|---|
|`[link](r-project.org)`|[link](r-project.org)|
|`{{{< kbd Shift-Ctrl-P >}}}`|{{< kbd Shift-Ctrl-P >}}|

### Blockquote

```         
> This is a block quote. This
> paragraph has two lines.
>
> 1. This is a list inside a block quote.
> 2. Second item.
```

> This is a block quote. This paragraph has two lines.
>
> 1.  This is a list inside a block quote.
> 2.  Second item.

### Line block

Line block preserves spaces and new lines.

```
| This
|     block
|          preserves
|                   formatting
```

| This
|     block
|          preserves
|                   formatting

### Rule

A horizontal line can be created using three or more `*` or `-`.

`***`

------------------------------------------------------------------------

### Footnote

An example of footnote reference [^1]

[^1]: That reference refers to this footnote.

### Aside

`[This content lives in the right margin]{.aside}`

[This content lives in the right margin]{.aside}

### Badge

Badges are defined as such:

`[badge]{.badge .badge-primary}`  [badge]{.badge .badge-primary}  
`[badge]{.badge .badge-secondary}`  [badge]{.badge .badge-secondary}  

## Code formatting

Verbatim code is text formatted using monospaced font intended as code. Verbatim code can be defined inline where `` `date()` `` looks like `date()`.

Code can also be defined inside code blocks.

````
```
date()
```
````

```
date()
```

Source code, ie; code that is highlighted or executed in a quarto document is not covered here.

## Code execution

Code can be defined inline where `` `r "\u0060r Sys.Date()\u0060"` `` renders `r Sys.Date()`. 

Code can be defined inside code blocks.

````
```{{r}}
Sys.Date()
```
````

which shows the source code and output.

```{r}
Sys.Date()
```

Here is another example of executed R code with input and output.

```{r}
data(iris)
head(iris[,1:2])
```

## Code sizing

**Sizing pre-formatted inline code**

```         
[`Sys.Date()`]{.largest}
[`Sys.Date()`]{.larger}
[`Sys.Date()`]{.large}
`Sys.Date()`
[`Sys.Date()`]{.small}
[`Sys.Date()`]{.smaller}
[`Sys.Date()`]{.smallest}
```

[`Sys.Date()`]{.largest}\
[`Sys.Date()`]{.larger}\
[`Sys.Date()`]{.large}\
`Sys.Date()`\
[`Sys.Date()`]{.small}\
[`Sys.Date()`]{.smaller}\
[`Sys.Date()`]{.smallest}

**Sizing pre-formatted code block**

````
::: {.small}
```
Sys.Date()
```
:::
````

::: {.small}
```
Sys.Date()
```
:::

::: {.smaller}
```
Sys.Date()
```
:::

::: {.smallest}
```
Sys.Date()
```
:::

:::
:::

**Sizing source code**

```{{r}}
#| eval: false
#| class-source: small
Sys.Date()
```

```{r}
#| eval: false
#| class-source: small
Sys.Date()
```

```{r}
#| eval: false
#| class-source: smaller
Sys.Date()
```

```{r}
#| eval: false
#| class-source: smallest
Sys.Date()
```

**Sizing output code**

```{{r}}
#| class-source: small
#| classes: small
Sys.Date()
```

```{r}
#| class-source: small
#| classes: small
Sys.Date()
```

```{r}
#| class-source: smaller
#| classes: smaller
Sys.Date()
```

```{r}
#| class-source: smallest
#| classes: smallest
Sys.Date()
```

## Chunk attributes

Properties and behaviour of code chunks can be controlled using chunk attributes. This is specified as comment sign of the language and pipe followed by key: value. So for example, in R: `#| eval: false`.

In this example, the R source code and results are hidden but the code is evaluated.

````         
```{{r}}
#| eval: true
#| echo: false
#| results: hide
Sys.Date()
```
````

A code chunk can be given a code filename using the chunk attribute `filename`.

````
```{{r}}
#| filename: R code
Sys.Date()
```
````

```{r}
#| filename: R code
#| eval: false
Sys.Date()
```

Enable line numbers using `code-line-numbers: true`.

````
```{{r}}
#| code-line-numbers: true
Sys.Date()
sessionInfo()
```
````

```{r}
#| eval: false
#| code-line-numbers: true
Sys.Date()
sessionInfo()
```

An advanced example showing bash code generated from R.

````
```{{r}}
#| attr-output: "filename='bash'"
#| class-output: bash
#| echo: false
d <- "custom"
cat(paste("mkdir​", d))
```
````

```{r}
#| attr-output: "filename='bash'"
#| class-output: bash
#| echo: false
d <- "custom"
cat(paste("mkdir​", d))
```

Code chunk attributes are documented [here](https://quarto.org/docs/output-formats/html-code.html).

## Lists

### Unordered

Unordered lists are created using dashes.

::: {.grid}
::: {.g-col-6}

```
- Bullet 1
- Bullet 2
  - Sub-bullet 2.1
  - Sub-bullet 2.2
- Bullet 3
```

:::
::: {.g-col-6}

- Bullet 1
- Bullet 2
  - Sub-bullet 2.1
  - Sub-bullet 2.2
- Bullet 3

:::
:::

### Ordered

Ordered lists are created using numbers.

::: {.grid}
::: {.g-col-6}

```
1. Point 1
2. Point 2
3. Point 3
```

:::
::: {.g-col-6}

1. Point 1
2. Point 2
3. Point 3

:::
:::

### Multiple Lists

::: {.grid}
::: {.g-col-6}

```
::: {}
1. Point 1
2. Point 2
:::

:::{}
1. Point 1
2. Point 2
:::
```

:::
::: {.g-col-6}

::: {}
1. Point 1
2. Point 2
:::

:::{}
1. Point 1
2. Point 2
:::

:::
:::

## Images

Images can be inserted using plain markdown or HTML directly. Plain markdown can be embellished with custom quarto adjustments to modify aspects of the image. Clicking the image opens the image in a lightbox. This is made possible using the [lightbox](https://github.com/quarto-ext/lightbox) extension.

### Using Markdown

Using regular markdown.

```         
![](assets/image.jpg)
```

![](assets/image.jpg)

The dimensions are based on image and/or fill up the entire available space. You can control the dimension as shown below.

```         
![This is a caption](assets/image.jpg){width=30%}  
```

![This is a caption](assets/image.jpg){width="30%"}

This image above is now 30% of it's original width.

#### Figure layout

```         
::: {#fig-mylabel layout-ncol=2}
![Caption for figure 1](assets/image.jpg){width="40%"}

![Caption for figure 2](assets/image.jpg){width="40%"}

These figures are interesting.
:::
```

::: {#fig-mylabel layout-ncol="2"}
![Caption for figure 1](assets/image.jpg){width="40%"}

![Caption for figure 2](assets/image.jpg){width="40%"}

These figures are interesting.
:::

More figure options and layouts are described [here](https://quarto.org/docs/authoring/figures.html). Cross referencing described [here](https://quarto.org/docs/authoring/cross-references.html).

### Using HTML

This image below is 30% size.\
`<img src="assets/image.jpg" style="width:30%;"/>`

<img src="assets/image.jpg" style="width:30%;"/>

For more information on figures, see [here](https://quarto.org/docs/authoring/figures.html). Images generated through code is not covered here.

### Static images using R

Quarto chunks can be used to control image display size using the argument `out.width`.

This image below is displayed at a size of 300 pixels.

````         
```{{r}}
#| out-width: 300px
knitr::include_graphics("assets/image.jpg")
```
````

```{r}
#| echo: false
#| out-width: "300px"
knitr::include_graphics("assets/image.jpg")
```

This image below is displayed at a size of 75 pixels and a caption added.

````         
```{{r}}
#| out-width: 75px
#| fig-cap: This is a caption
knitr::include_graphics("assets/image.jpg")
```
````

```{r}
#| echo: false
#| out-width: "75px"
#| fig-cap: This is a caption
knitr::include_graphics("assets/image.jpg")
```

For more information on figures, see [here](https://quarto.org/docs/authoring/figures.html). For plots generated through R, see section further below.


## Math expressions

Some examples of rendering equations.

::: {.grid}
::: {.g-col-6}

```         
$e^{i\pi} + 1 = 0$
```

:::
::: {.g-col-6}

$e^{i\pi} + 1 = 0$

:::
:::

::: {.grid}
::: {.g-col-6}

```         
$$\frac{E \times X^2 \prod I}{2+7} = 432$$
```

:::
::: {.g-col-6}

$$\frac{E \times X^2 \prod I}{2+7} = 432$$

:::
:::

::: {.grid}
::: {.g-col-6}

```         
$$\sum_{i=1}^n X_i$$
```

:::
::: {.g-col-6}

$$\sum_{i=1}^n X_i$$

:::
:::

::: {.grid}
::: {.g-col-6}

```         
$$\int_0^{2\pi} \sin x~dx$$
```

:::
::: {.g-col-6}

$$\int_0^{2\pi} \sin x~dx$$

:::
:::

::: {.grid}
::: {.g-col-6}

```         
$\left( \sum_{i=1}^{n}{i} \right)^2 = \left( \frac{n(n-1)}{2}\right)^2 = \frac{n^2(n-1)^2}{4}$
```

:::
::: {.g-col-6}

$\left( \sum_{i=1}^{n}{i} \right)^2 = \left( \frac{n(n-1)}{2}\right)^2 = \frac{n^2(n-1)^2}{4}$

:::
:::

::: {.grid}
::: {.g-col-6}

```         
$\begin{eqnarray} X & \sim & \mathrm{N}(0,1)\\ Y & \sim & \chi^2_{n-p}\\ R & \equiv & X/Y \sim t_{n-p} \end{eqnarray}$
```

:::
::: {.g-col-6}

$\begin{eqnarray} X & \sim & \mathrm{N}(0,1)\\ Y & \sim & \chi^2_{n-p}\\ R & \equiv & X/Y \sim t_{n-p} \end{eqnarray}$

:::
:::

::: {.grid}
::: {.g-col-6}

```         
$\begin{eqnarray} P(|X-\mu| > k) & = & P(|X-\mu|^2 > k^2)\\ & \leq & \frac{\mathbb{E}\left[|X-\mu|^2\right]}{k^2}\\ & \leq & \frac{\mathrm{Var}[X]}{k^2} \end{eqnarray}$
```

:::
::: {.g-col-6}

$\begin{eqnarray} P(|X-\mu| > k) & = & P(|X-\mu|^2 > k^2)\\ & \leq & \frac{\mathbb{E}\left[|X-\mu|^2\right]}{k^2}\\ & \leq & \frac{\mathrm{Var}[X]}{k^2} \end{eqnarray}$

:::
:::

## Icons

### Bootstrap icons

[Bootstrap icons](https://icons.getbootstrap.com) are directly available since quarto uses bootstrap for styling. Optionally, one could also use the quarto extension [bsicons](https://github.com/shafayetShafee/bsicons) for more control.


`<i class="bi bi-lightbulb-fill"></i>`  <i class="bi bi-lightbulb-fill"></i>  
`<i class="bi bi-exclamation-circle-fill"></i>`  <i class="bi bi-exclamation-circle-fill"></i>  
`<i class="bi bi-clipboard2-check-fill"></i>`  <i class="bi bi-clipboard2-check-fill"></i>  
`<i class="bi bi-chat-fill"></i>`  <i class="bi bi-chat-fill"></i>  
`<i class="bi bi-laptop-fill"></i>`  <i class="bi bi-laptop-fill"></i>  
`<i class="bi bi-cloud-fill"></i>`  <i class="bi bi-cloud-fill"></i>  
`<i class="bi bi-github"></i>`  <i class="bi bi-github"></i>  

### Fontawesome

To use [fontawesome](https://fontawesome.com/search?m=free) icons as shortcodes, quarto extension [fontawesome](https://github.com/quarto-ext/fontawesome) needs to be installed.

Icons can be placed using shortcodes.

`{{{< fa lightbulb >}}}`      {{< fa lightbulb >}}     
`{{{< fa exclamation >}}}`    {{< fa exclamation >}}   
`{{{< fa clipboard-list >}}}` {{< fa clipboard-list >}}  
`{{{< fa comments >}}}`       {{< fa comments >}}      
`{{{< fa desktop >}}}`        {{< fa desktop >}}       
`{{{< fa cloud >}}}`          {{< fa cloud >}}         
`{{{< fa check >}}}`          {{< fa check >}}         
`{{{< fa times >}}}`          {{< fa times >}}         
`{{{< fa skull >}}}`          {{< fa skull >}}         
`{{{< fa skull size=2x >}}}`  {{< fa skull size=2x >}}   
`{{{< fa brands github >}}}`  {{< fa brands github >}}

Icons can be displayed using the HTML `<i>` tag. Note that not all icons may work.

`Here is a <i class='fa fa-calendar'></i> calendar and a <i class='fa fa-couch'></i> couch.`

Here is a <i class='fa fa-calendar'></i> calendar and a <i class='fa fa-couch'></i> couch.

There are many other quarto extensions for icons such as [academicons](https://github.com/schochastics/academicons), [iconify](https://github.com/mcanouil/quarto-iconify) and [lordicons](https://github.com/jmgirard/lordicon). 

### Icons in R

Icons can be placed programatically through R using the R package `fontawesome`.

`` `r "\u0060r fontawesome::fa('lightbulb')\u0060"` ``

`r fontawesome::fa("lightbulb")`

Optional arguments are height and fill.

`` `r "\u0060r fontawesome::fa('lightbulb',height='30px',fill='steelblue')\u0060"` ``

`r fontawesome::fa("lightbulb",height='30px',fill='steelblue')`

For full list of icons check out [FontAwesome](https://fontawesome.com/search?m=free).

## Call-Outs

Call-Out blocks are explained [here](https://quarto.org/docs/authoring/callouts.html).

```         
::: {.callout-note}
This is a call-out.
:::

::: {.callout-warning}
This is a call-out.
:::

::: {.callout-important}
This is a call-out.
:::

::: {.callout-tip}
This is a call-out.
:::

::: {.callout-caution}
This is a call-out.
:::

::: {.callout-tip collapse="true"}
## Call-out with collapse

This content is behind an accordion.
:::
```

::: callout-note
This is a call-out.
:::

::: callout-warning
This is a call-out.
:::

::: callout-important
This is a call-out.
:::

::: callout-tip
This is a call-out.
:::

::: callout-caution
This is a call-out.
:::

::: {.callout-tip collapse="true"}
## Call-out with collapse

This content is behind an accordion.
:::

## Alerts

```         
::: {.alert .alert-primary}
**Note:** This is an alert!
:::
::: {.alert .alert-secondary}
**Note:** This is an alert!
:::
::: {.alert .alert-success}
**Note:** This is a success alert!
:::
::: {.alert .alert-danger}
**Note:** This is a danger alert!
:::
::: {.alert .alert-warning}
**Note:** This is a warning alert!
:::
::: {.alert .alert-info}
**Note:** This is an info alert!
:::
```

::: {.alert .alert-primary}
**Note:** This is an alert!
:::

::: {.alert .alert-secondary}
**Note:** This is an alert!
:::

::: {.alert .alert-success}
**Note:** This is a success alert!
:::

::: {.alert .alert-danger}
**Note:** This is a danger alert!
:::

::: {.alert .alert-warning}
**Note:** This is a warning alert!
:::

::: {.alert .alert-info}
**Note:** This is an info alert!
:::

## Layout

### Span

`[Content inside span]{style="background-color: gray"}`

[Content inside span]{style="background-color: gray"}

### Div

```
::: {style="background-color: gray"}
Content inside div
:::
```

::: {style="background-color: gray"}
Content inside div
:::

Divs can be nested like this:

```
:::: {.class}
::: {.class}
:::
::::
```

Both spans and divs support attributes in this specific order: identifiers, classes, and then key-value attributes. 

`[Content inside span]{#id .class key1="val1" key2="val2"}`

### Hidden div

```
::: {.hidden}
Hidden content
:::
```

### Conditional content

````
::: {{.content-visible when-format="html"}}
Will only appear in HTML.
:::
````

````
::: {{.content-hidden when-format="html"}}
Will not appear in HTML.
:::
````

Conditional content is documented [here](https://quarto.org/docs/authoring/conditional.html).

### Inner columns

Organisation of content into columns within the body container.

```         
:::: {.columns}
::: {.column style="background-color: aliceblue"}
Content is left.
:::
::: {.column style="background-color:  #f5b7b1"}
Content is right.
:::
::::
```

::: columns
::: {.column style="background-color: aliceblue"}
Content in left column.
:::

::: {.column style="background-color:  #f5b7b1"}
Content in right column.
:::
:::

<br>

This is an example of nested columns.

```         
:::: {.columns}

::: {.column style="background-color: aliceblue"}
Content in left column.
:::

::: {.column}
Content in right column.

:::: {.columns}
::: {.column style="background-color: #d0ece7"}
Nested left.
:::
::: {.column style="background-color: #f2d7d5"}
Nested right.
:::
::::

:::

::::
```

::: columns
::: {.column style="background-color: aliceblue"}
Content in left column.
:::

::: column
Content in right column.

::: columns
::: {.column style="background-color: #d0ece7"}
Nested left.
:::

::: {.column style="background-color: #f2d7d5"}
Nested right.
:::
:::
:::
:::

### Outer columns

Extending content outside the body container.

```         
::: {.column-body style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body
:::

::: {.column-body-outset style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body-outset
:::

::: {.column-page-inset style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-inset
:::

::: {.column-page style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page
:::

::: {.column-screen-inset style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-inset
:::

::: {.column-screen style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen
:::

::: {.column-body-outset-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body-outset-right
:::

::: {.column-page-inset-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-inset-right
:::

::: {.column-page-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-right
:::

::: {.column-screen-inset-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-inset-right
:::

::: {.column-screen-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-right
:::

::: {.column-body-outset-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body-outset-left
:::

::: {.column-page-inset-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-inset-left
:::

::: {.column-page-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-left
:::

::: {.column-screen-inset-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-inset-left
:::

::: {.column-screen-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-left
:::

::: {.column-margin style="background-color: lightgray; margin-bottom:0.5em;"}
.column-margin
:::
```

::: {.column-body style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body
:::

::: {.column-body-outset style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body-outset
:::

::: {.column-page-inset style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-inset
:::

::: {.column-page style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page
:::

::: {.column-screen-inset style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-inset
:::

::: {.column-screen style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen
:::

::: {.column-body-outset-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body-outset-right
:::

::: {.column-page-inset-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-inset-right
:::

::: {.column-page-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-right
:::

::: {.column-screen-inset-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-inset-right
:::

::: {.column-screen-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-right
:::

::: {.column-body-outset-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body-outset-left
:::

::: {.column-page-inset-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-inset-left
:::

::: {.column-page-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-left
:::

::: {.column-screen-inset-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-inset-left
:::

::: {.column-screen-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-left
:::

::: {.column-margin style="background-color: lightgray; margin-bottom:0.5em;"}
.column-margin
:::

### Panel layout

```         
::: {.panel-tabset}
#### Sub topic 1

This is some material for topic 1.

#### Sub topic 2

This is some material for topic 2.

:::
```

::: panel-tabset
#### Sub topic 1

This is some material for topic 1.

#### Sub topic 2

This is some material for topic 2.
:::

More layout settings are described [here](https://quarto.org/docs/authoring/article-layout.html) and [here](https://quarto.org/docs/output-formats/page-layout.html).

## Tables

### Manual

For simple cases, tables can be manually created in markdown.

::: {.grid}
::: {.g-col-7}

```         
|speed|dist|
|-----|----|
|4    |   2|
|4    |  10|
|7    |   4|
```

:::
::: {.g-col-5}

| speed | dist |
|-------|------|
| 4     | 2    |
| 4     | 10   |
| 7     | 4    |

:::
:::

Table caption and numbering can be added as such:

::: {.grid}
::: {.g-col-7}

```         
|speed|dist|
|-----|----|
|4    |   2|
|4    |  10|
|7    |   4|

: These are exciting results. {#tbl-mylabel}
```

:::
::: {.g-col-5}

| speed | dist |
|-------|------|
| 4     | 2    |
| 4     | 10   |
| 7     | 4    |

: These are exciting results. {#tbl-mylabel}

:::
:::

More information about [tables](https://quarto.org/docs/authoring/tables.html).

### Margin table

A table placed in the margin.

```
::: {.column-margin}

| speed | dist |
|-------|------|
| 4     | 2    |
| 4     | 10   |
| 7     | 4    |

:::
```

::: {.column-margin}

| speed | dist |
|-------|------|
| 4     | 2    |
| 4     | 10   |
| 7     | 4    |

:::

### kable

Simple table using `kable` from R package `knitr`. This is the default output for quarto.

```{r}
library(knitr)
head(iris)
```

#### Layout

````
```{{r}}
#| column: body-outset
#| label: tbl-dual-table
#| tbl-cap: "Example"
#| tbl-subcap: 
#|   - "Cars"
#|   - "Pressure"
#| layout-ncol: 2

kable(head(cars))
kable(head(pressure))
```
````

```{r}
#| echo: false
#| column: body-outset
#| label: tbl-dual-table
#| tbl-cap: "Example"
#| tbl-subcap:
#|   - "Cars"
#|   - "Pressure"
#| layout-ncol: 2

kable(head(cars))
kable(head(pressure))
```

#### Cross referencing

Images and tables can be automatically numbered by using `label` attribute. Image label must start with `fig-` and tables with `tbl-`. Tables and images can also be cross-referenced when using the `label` attribute. For example, the table above can be referenced like `@tbl-dual-table` which renders as @tbl-dual-table.

#### Margin table

````
```{{r}}
#| fig-caption: This table is in the margin.
#| column: margin

head(cars)
```
````

```{r}
#| fig-caption: This table is in the margin.
#| column: margin
#| echo: false

head(cars)
```

### gt

Tables using the [gt](https://gt.rstudio.com/) package. A structured approach to creating tables using grammar of tables with extensive customization options.

```{r}
library(gt)

iris %>%
    group_by(Species) %>%
    slice(1:4) %>%
    gt() %>%
    cols_label(
      Sepal.Length = "Sepal Length", Sepal.Width = "Sepal Width",
      Petal.Length = "Petal Length", Petal.Width = "Petal Width"
    ) %>%
    tab_source_note(
        source_note = md("Source: Iris data. Anderson, 1936; Fisher, 1936)")
    )
```

### htmlTable

Markdown tables can be enhanced using the R package [htmlTable](https://github.com/gforge/htmlTable).

```{r}
library(htmlTable)

iris1 <- iris[c(1:4,51:53,105:108),]
htmlTable(iris1, rgroup=unique(iris1$Species), n.rgroup=rle(as.character(iris1$Species))$lengths)
```

### kableExtra

More advanced table using [`kableExtra`](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html) and [`formattable`](https://cran.r-project.org/web/packages/formattable/vignettes/formattable-data-frame.html).

```{r}
#| tbl-cap: Table using kableextra.
library(kableExtra)

iris[c(1:4,51:53,105:108),] %>%
  mutate(Sepal.Length=color_bar("lightsteelblue")(Sepal.Length)) %>%
  mutate(Sepal.Width=color_tile("white","orange")(Sepal.Width)) %>%
  mutate(Species=cell_spec(Species,"html",color="white",bold=T,
    background=c("#8dd3c7","#fb8072","#bebada")[factor(.$Species)])) %>%
  kable("html",escape=F) %>%
  kable_styling(bootstrap_options=c("striped","hover","responsive"),
                full_width=F,position="left") %>%
  column_spec(5,width="3cm")
```

### DT

Interactive table using R package [`DT`](https://rstudio.github.io/DT/).

```{r}
#| tbl-cap: Table using datatable.
library(DT)

iris %>%
  slice(1:15) %>%
  datatable(options=list(pageLength=7))
```

### reactable

Advanced interactive tables with [reactable](https://glin.github.io/reactable/index.html).

```{r}
library(reactable)

reactable(iris[sample(1:150,10),],
  columns = list(
    Sepal.Length = colDef(name = "Sepal Length"),
    Sepal.Width = colDef(name = "Sepal Width"),
    Petal.Width = colDef(name = "Petal Width"),
    Petal.Width = colDef(name = "Petal Width")
  ),
  striped = TRUE,
  highlight = TRUE,
  filterable = TRUE
)
```

**reactable** creation can be simplified as well as enhanced by using [reactablefmtr](https://github.com/kcuilla/reactablefmtr/).

## Static plots

### Base plot

-   Plots using base R are widely used and may be good enough for most situations.
-   But they lack a consistent coding framework.


```{r}
#| fig-height: 6
#| fig-width: 6
#| label: fig-plot-base
#| fig-cap: Static plot using base plot.

{
  plot(x=iris$Sepal.Length,y=iris$Sepal.Width,
      col=c("coral","steelblue","forestgreen")[iris$Species],
      xlab="Sepal Length",ylab="Sepal Width",pch=19)

  legend(x=7,y=4.47,legend=c("setosa","versicolor","virginica"),
        col=c("coral","steelblue","forestgreen"),pch=19)
}
```

#### Multiple plots

````
```{{r}}
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-cap:
#|   - "Scatterplot of speed vs distance"
#|   - "Pairwise scatterplot of all variables"
#|   - "Scatterplot of temperature vs pressure"

plot(cars)
plot(iris)
plot(pressure)
```
````

```{r}
#| column: screen-inset-shaded
#| layout-nrow: 1
#| echo: false
#| fig-cap:
#|   - "Scatterplot of speed vs distance"
#|   - "Pairwise scatterplot of all variables"
#|   - "Scatterplot of temperature vs pressure"

plot(cars)
plot(iris)
plot(pressure)
```

#### Margin plot

```{{{r}}}
#| column: margin

plot(cars)
```

```{r}
#| column: margin

plot(cars)
```

### ggplot2

R package [`ggplot2`](http://ggplot2.org/) is one of the most versatile and complete plotting solutions.

```{r}
#| fig-height: 6
#| fig-width: 8
#| label: plot-ggplot
#| fig-cap: Static plot using ggplot2.
#| cap-location: margin
library(ggplot2)

iris %>%
  ggplot(aes(x=Sepal.Length,y=Sepal.Width,col=Species))+
  geom_point(size=2)+
  labs(x="Sepal Length",y="Sepal Width")+
  theme_report()
```

## Interactive plots

### highcharter

R package [`highcharter`](http://jkunst.com/highcharter/) is a wrapper around javascript library [`highcharts`](https://www.highcharts.com/).

```{r}
#| label: plot-highcharter
#| fig-cap: Interactive scatterplot using highcharter.
library(highcharter)

h <- iris %>%
  hchart(.,"scatter",hcaes(x="Sepal.Length",y="Sepal.Width",group="Species")) %>%
  hc_xAxis(title=list(text="Sepal Length"),crosshair=TRUE) %>%
  hc_yAxis(title=list(text="Sepal Width"),crosshair=TRUE) %>%
  hc_chart(zoomType="xy",inverted=FALSE) %>%
  hc_legend(verticalAlign="top",align="right") %>%
  hc_size(height=400)

htmltools::tagList(list(h))
```

### plotly

R package [`plotly`](https://plot.ly/r/) provides R binding around javascript plotting library [`plotly`](https://plot.ly).

```{r}
#| fig-cap: Interactive scatterplot using plotly.
library(plotly)

p <- iris %>%
  plot_ly(x=~Sepal.Length,y=~Sepal.Width,color=~Species,width=500,height=400) %>%
  add_markers()
p
```

### ggplotly

`plotly` also has a function called `ggplotly` which converts a static ggplot2 object into an interactive plot.

```{r}
#| fig-height: 5
#| fig-width: 7
#| fig-cap: Interactive scatterplot using ggplotly.
library(plotly)

p <- iris %>%
  ggplot(aes(x=Sepal.Length,y=Sepal.Width,col=Species))+
  geom_point()+
  labs(x="Sepal Length",y="Sepal Width")+
  theme_bw(base_size=12)

ggplotly(p,width=500,height=400)
```

### ggiraph

`ggiraph` is also an R package that can be used to convert a static ggplot2 object into an interactive plot.

```{r}
#| fig-height: 5
#| fig-width: 7
#| fig-cap: Interactive scatterplot using ggiraph.
library(ggiraph)

p <- ggplot(iris,aes(x=Sepal.Length,y=Petal.Length,colour=Species))+
      geom_point_interactive(aes(tooltip=paste0("<b>Petal Length:</b> ",Petal.Length,"\n<b>Sepal Length: </b>",Sepal.Length,"\n<b>Species: </b>",Species)),size=2)+
  theme_bw()

tooltip_css <- "background-color:#e7eef3;font-family:Roboto;padding:10px;border-style:solid;border-width:2px;border-color:#125687;border-radius:5px;"

ggiraph(code=print(p),hover_css="cursor:pointer;stroke:black;fill-opacity:0.3",zoom_max=5,tooltip_extra_css=tooltip_css,tooltip_opacity=0.9)
```

### dygraphs

R package [`dygraphs`](http://rstudio.github.io/dygraphs/) provides R bindings for javascript library [dygraphs](http://dygraphs.com/) for time series data.

```{r}
#| fig-height: 5
#| fig-width: 9
#| fig-cap: Interactive time series plot using dygraph.
library(dygraphs)

lungDeaths <- cbind(ldeaths, mdeaths, fdeaths)
dygraph(lungDeaths,main="Deaths from Lung Disease (UK)") %>%
  dyOptions(colors=c("#66C2A5","#FC8D62","#8DA0CB"))
```

### Network graph

R package `networkD3` allows the use of interactive network graphs from the [D3.js](https://d3js.org/) javascript library.

```{r}
#| fig-cap: Interactive network plot.
library(networkD3)

data(MisLinks,MisNodes)
forceNetwork(Links=MisLinks,Nodes=MisNodes,Source="source",
             Target="target",Value="value",NodeID="name",
             Group="group",opacity=0.4)
```

### leaflet

R package [`leaflet`](https://rstudio.github.io/leaflet/) provides R bindings for javascript mapping library; [leafletjs](http://leafletjs.com/).

```{r}
#| fig-cap: Interactive map using leaflet.
library(leaflet)

leaflet(height=500,width=700) %>%
  addTiles(urlTemplate='http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png') %>%
  #addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
  addMarkers(lat=57.639327,lng=18.288534,popup="RaukR") %>%
  setView(lat=57.639327,lng=18.288534,zoom=15)
```

### crosstalk

R package [`crosstalk`](https://rstudio.github.io/crosstalk/index.html) allows `crosstalk` enabled plotting libraries to be linked. Through the shared 'key' variable, data points can be manipulated simultaneously on two independent plots.

```{r}
#| fig-height: 8
#| fig-cap: Linking independent plots using crosstalk.
library(crosstalk)

shared_quakes <- SharedData$new(quakes[sample(nrow(quakes), 100),])
lf <- leaflet(shared_quakes,height=300) %>%
        addTiles(urlTemplate='http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png') %>%
        addMarkers()
py <- plot_ly(shared_quakes,x=~depth,y=~mag,size=~stations,height=300) %>%
        add_markers()

htmltools::div(lf,py)
```

## ObservableJS

Quarto supports [ObservableJS](https://observablehq.com/) for interactive visualisations in the browser.

Pass data from R to OJS

```{r}
irism <- iris
colnames(irism) <- gsub("[.]","_",tolower(colnames(irism)))
ojs_define(ojsd = irism)
```

```{ojs}
ojsdata = transpose(ojsd)
```

Display as a table

```{ojs}
viewof filtered_table = Inputs.table(ojsdata)
```

Define inputs

```{ojs}
viewof x = Inputs.select(Object.keys(ojsdata[0]), {value: "sepal_length", multiple: false, label: "X axis"})
```

```{ojs}
viewof y = Inputs.select(Object.keys(ojsdata[0]), {value: "sepal_width", multiple: false, label: "Y axis"})
```

Display plot

```{ojs}
Plot.plot({
  marks: [
    Plot.dot(ojsdata, {
      x: x,
      y: y,
      fill: "species",
      title: (d) =>
        `${d.species} \n Petal length: ${d.petal_length} \n Sepal length: ${d.sepal_length}`
    })
  ],
  grid: true
})
```

ObservableJS in quarto [documentation](https://quarto.org/docs/interactive/index.html#observable-js).

## General tips

-   Use level 2 heading as the highest level

```
## Section A
```

-   Add custom css under YAML if needed `css: "my-theme.css"`
-   Check out the [Quarto](https://quarto.org/) website
